import { TemplateFunction, tsTemplate, jsTemplate } from 'free-swagger-client'
import camelcase from 'camelcase'
import { Config, isSwaggerDocument, MockConfig } from '../utils'
import { rc } from './rc'
import path from 'path'

export const DEFAULT_CUSTOM_IMPORT_CODE_TS = `import axios,{ AxiosResponse } from "axios";`
export const DEFAULT_CUSTOM_IMPORT_CODE_JS = `import axios from "axios";`
export const DEFAULT_HEAD_CODE_TS = `
/* eslint-disable */
// @ts-nocheck 
// generated by free-swagger

`
export const DEFAULT_HEAD_CODE_JS = `
/* eslint-disable */
// generated by free-swagger

`

const getDefaultConfig = (
  config: Config
): Required<Omit<Config, 'source'>> => ({
  root: global.__DEV__
    ? path.resolve(__dirname, '../../test/api/pkg/default')
    : path.resolve(process.cwd(), 'src/api'),
  cookie: '',
  customImportCode:
    config.lang === 'ts'
      ? DEFAULT_CUSTOM_IMPORT_CODE_TS
      : DEFAULT_CUSTOM_IMPORT_CODE_JS,
  lang: 'js',
  templateFunction: eval(jsTemplate),
  chooseAll: false,
  useJsDoc: false,
  fileName: (name) => camelcase(name),
  propComment: 'tail',
})

export const mergeDefaultConfig = async (
  config: Config | string
): Promise<Required<Config>> => {
  let mergedConfig: Config = <Config>{}

  if (typeof config === 'string') {
    mergedConfig.source = config
    rc.recordHash(mergedConfig.source)
  } else if (isSwaggerDocument(config)) {
    mergedConfig.source = config
  } else {
    mergedConfig = config
  }

  let templateFunction: TemplateFunction
  if (mergedConfig.templateFunction) {
    templateFunction = mergedConfig.templateFunction
  } else if (!mergedConfig.lang) {
    templateFunction = eval(jsTemplate)
  } else {
    templateFunction =
      mergedConfig.lang === 'ts' ? eval(tsTemplate) : eval(jsTemplate)
  }

  return {
    ...getDefaultConfig(mergedConfig),
    templateFunction,
    ...mergedConfig,
  }
}

export const mergeDefaultMockConfig = (
  config: MockConfig | string
): Required<MockConfig> => {
  let mergedConfig: MockConfig = <MockConfig>{}

  if (typeof config === 'string') {
    mergedConfig.source = config
  } else if (isSwaggerDocument(config)) {
    mergedConfig.source = config
  } else {
    mergedConfig = config
  }

  return {
    ...rc.getDefaultMockAnswer(),
    ...mergedConfig,
  }
}
